diff -Nru valgrind-3.12.0/coregrind/m_scheduler/scheduler.c valgrind-3.12.0.new/coregrind/m_scheduler/scheduler.c
--- valgrind-3.12.0/coregrind/m_scheduler/scheduler.c	2016-10-21 06:37:40.000000000 -0400
+++ valgrind-3.12.0.new/coregrind/m_scheduler/scheduler.c	2017-02-26 15:15:47.060402608 -0500
@@ -1884,6 +1884,16 @@
          SET_CLREQ_RETVAL(tid, RUNNING_ON_VALGRIND+1);
          break;
 
+      case VG_USERREQ__GET_POISONFUNCS: {
+	 void (**poisonfunc) (ThreadId,void*, SizeT);
+         poisonfunc = (void (**) (ThreadId,void*, SizeT)) arg[1];
+         poisonfunc[0] = VG_(tdict).tool_poison;
+         poisonfunc[1] = VG_(tdict).tool_unpoison;
+         SET_CLREQ_RETVAL( tid, 0 );     /* return value is meaningless */
+
+	 break;
+      }
+
       case VG_USERREQ__PRINTF: {
          const HChar* format = (HChar *)arg[1];
          /* JRS 2010-Jan-28: this is DEPRECATED; use the
diff -Nru valgrind-3.12.0/coregrind/m_tooliface.c valgrind-3.12.0.new/coregrind/m_tooliface.c
--- valgrind-3.12.0/coregrind/m_tooliface.c	2016-10-21 06:37:40.000000000 -0400
+++ valgrind-3.12.0.new/coregrind/m_tooliface.c	2017-02-26 15:13:23.375839789 -0500
@@ -358,6 +358,16 @@
    VG_(tdict).tool_client_redzone_szB   = client_malloc_redzone_szB;
 }
 
+void VG_(needs_poison_func)(
+   void (*poison_func)           ( ThreadId, void*, SizeT ),
+   void (*unpoison_func)         ( ThreadId, void*, SizeT )
+)
+{
+   VG_(needs).poison = True;
+   VG_(tdict).tool_poison = poison_func;
+   VG_(tdict).tool_unpoison = unpoison_func;
+}
+
 void VG_(needs_xml_output)( void )
 {
    VG_(needs).xml_output = True;
diff -Nru valgrind-3.12.0/coregrind/pub_core_tooliface.h valgrind-3.12.0.new/coregrind/pub_core_tooliface.h
--- valgrind-3.12.0/coregrind/pub_core_tooliface.h	2016-10-21 06:37:39.000000000 -0400
+++ valgrind-3.12.0.new/coregrind/pub_core_tooliface.h	2017-02-26 15:52:41.370367848 -0500
@@ -92,6 +92,7 @@
       Bool print_stats;
       Bool info_location;
       Bool var_info;
+      Bool poison;
       Bool malloc_replacement;
       Bool xml_output;
       Bool final_IR_tidy_pass;
@@ -171,6 +172,10 @@
    SizeT (*tool_malloc_usable_size)  (ThreadId, void*);
    SizeT tool_client_redzone_szB;
 
+   // VG_(needs).poison
+   void (*tool_poison)               (ThreadId, void*, SizeT);
+   void (*tool_unpoison)             (ThreadId, void*, SizeT);
+
    // VG_(needs).final_IR_tidy_pass
    IRSB* (*tool_final_IR_tidy_pass)  (IRSB*);
 
diff -Nru valgrind-3.12.0/coregrind/vg_preloaded.c valgrind-3.12.0.new/coregrind/vg_preloaded.c
--- valgrind-3.12.0/coregrind/vg_preloaded.c	2016-10-21 06:37:40.000000000 -0400
+++ valgrind-3.12.0.new/coregrind/vg_preloaded.c	2017-02-26 13:21:22.494033688 -0500
@@ -374,6 +374,34 @@
 #  error Unknown OS
 #endif
 
+static int init_done = 0;
+static void (*poison_funcs[2]) (void*, SizeT);
+
+static void init_if_needed() {
+	if (!init_done) {
+		int res;
+		init_done = 1;
+		VALGRIND_DO_CLIENT_REQUEST(res, -1, VG_USERREQ__GET_POISONFUNCS, &poison_funcs,
+					   0, 0, 0, 0);
+	}
+}
+
+void VG_REPLACE_FUNCTION_ZU(libctgrindZdsoZa, ct_poison)(void *ptr, SizeT len);
+void VG_REPLACE_FUNCTION_ZU(libctgrindZdsoZa, ct_poison)(void *ptr, SizeT len) {
+	init_if_needed();
+
+	if (poison_funcs[0])
+		VALGRIND_NON_SIMD_CALL2(poison_funcs[0], ptr, len);
+}
+
+void VG_REPLACE_FUNCTION_ZU(libctgrindZdsoZa, ct_unpoison)(void *ptr, SizeT len);
+void VG_REPLACE_FUNCTION_ZU(libctgrindZdsoZa, ct_unpoison)(void *ptr, SizeT len) {
+	init_if_needed();
+
+	if (poison_funcs[1])
+		VALGRIND_NON_SIMD_CALL2(poison_funcs[1], ptr, len);
+}
+
 /*--------------------------------------------------------------------*/
 /*--- end                                                          ---*/
 /*--------------------------------------------------------------------*/
diff -Nru valgrind-3.12.0/include/pub_tool_tooliface.h valgrind-3.12.0.new/include/pub_tool_tooliface.h
--- valgrind-3.12.0/include/pub_tool_tooliface.h	2016-10-21 06:37:39.000000000 -0400
+++ valgrind-3.12.0.new/include/pub_tool_tooliface.h	2017-02-26 15:09:36.815451982 -0500
@@ -469,6 +469,11 @@
 /* Do we need to see variable type and location information? */
 extern void VG_(needs_var_info) ( void );
 
+extern void VG_(needs_poison_func)(
+  void (*poison)                  (ThreadId tid, void* addr, SizeT len),
+  void (*unpoison)                (ThreadId tid, void* addr, SizeT len)
+);
+
 /* Does the tool replace malloc() and friends with its own versions?
    This has to be combined with the use of a vgpreload_<tool>.so module
    or it won't work.  See massif/Makefile.am for how to build it. */
diff -Nru valgrind-3.12.0/include/valgrind.h valgrind-3.12.0.new/include/valgrind.h
--- valgrind-3.12.0/include/valgrind.h	2016-10-21 06:37:39.000000000 -0400
+++ valgrind-3.12.0.new/include/valgrind.h	2017-02-26 13:21:26.317391851 -0500
@@ -6714,7 +6714,10 @@
           VG_USERREQ__CHANGE_ERR_DISABLEMENT = 0x1801,
 
           /* Initialise IR injection */
-          VG_USERREQ__VEX_INIT_FOR_IRI = 0x1901
+          VG_USERREQ__VEX_INIT_FOR_IRI = 0x1901,
+
+	  /* ctgrind poisoning */
+	  VG_USERREQ__GET_POISONFUNCS = 0x2001,
    } Vg_ClientRequest;
 
 #if !defined(__GNUC__)
diff -Nru valgrind-3.12.0/include/valgrind.h.rej valgrind-3.12.0.new/include/valgrind.h.rej
--- valgrind-3.12.0/include/valgrind.h.rej	1969-12-31 19:00:00.000000000 -0500
+++ valgrind-3.12.0.new/include/valgrind.h.rej	2017-02-26 13:21:22.494033688 -0500
@@ -0,0 +1,13 @@
+--- include/valgrind.h	(revision 11097)
++++ include/valgrind.h	(working copy)
+@@ -4151,7 +4151,9 @@
+           VG_USERREQ__STACK_CHANGE     = 0x1503,
+ 
+           /* Wine support */
+-          VG_USERREQ__LOAD_PDB_DEBUGINFO = 0x1601
++          VG_USERREQ__LOAD_PDB_DEBUGINFO = 0x1601,
++
++          VG_USERREQ__GET_POISONFUNCS  = 0x1602,
+    } Vg_ClientRequest;
+ 
+ #if !defined(__GNUC__)
diff -Nru valgrind-3.12.0/memcheck/mc_include.h valgrind-3.12.0.new/memcheck/mc_include.h
--- valgrind-3.12.0/memcheck/mc_include.h	2016-10-21 06:37:39.000000000 -0400
+++ valgrind-3.12.0.new/memcheck/mc_include.h	2017-02-26 15:17:20.105184988 -0500
@@ -161,7 +161,8 @@
 
 void MC_(handle_resizeInPlace)(ThreadId tid, Addr p,
                                SizeT oldSizeB, SizeT newSizeB, SizeT rzB);
-
+void MC_(poison)(ThreadId tid, void *addr, SizeT len);
+void MC_(unpoison)(ThreadId tid, void *addr, SizeT len);
 
 /*------------------------------------------------------------*/
 /*--- Origin tracking translate-time support               ---*/
diff -Nru valgrind-3.12.0/memcheck/mc_main.c valgrind-3.12.0.new/memcheck/mc_main.c
--- valgrind-3.12.0/memcheck/mc_main.c	2016-10-21 06:37:39.000000000 -0400
+++ valgrind-3.12.0.new/memcheck/mc_main.c	2017-02-26 15:08:33.549478930 -0500
@@ -8093,6 +8093,14 @@
    return True;
 }
 
+void MC_(poison) (ThreadId tid, void* addr, SizeT len) {
+  make_mem_undefined((Addr) addr, len);
+}
+
+void MC_(unpoison) (ThreadId tid, void* addr, SizeT len) {
+  MC_(make_mem_defined) ((Addr) addr, len);
+}
+
 static void mc_pre_clo_init(void)
 {
    VG_(details_name)            ("Memcheck");
@@ -8133,6 +8141,8 @@
                                    mc_expensive_sanity_check);
    VG_(needs_print_stats)         (mc_print_stats);
    VG_(needs_info_location)       (MC_(pp_describe_addr));
+   VG_(needs_poison_func)         (MC_(poison),
+				   MC_(unpoison));
    VG_(needs_malloc_replacement)  (MC_(malloc),
                                    MC_(__builtin_new),
                                    MC_(__builtin_vec_new),
